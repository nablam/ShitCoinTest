The Structure I keep calling the stack. 

At the end of the day we have to accept that the script is going to buy one lot of the currency at the highest price it ever reaches. 

The Stack is the list of pending sales we have posted on the market.  

                 It needs to be a searchable index/array that stores 

                           CoinSymbol = The target Coin
                           PricePaid  = What we paid for it
                           clientOrderId = Value generated by exchange to point to posted sale. 
                           orderId       = another value returned by API we might need. 
                           [CoinSymbol,PricePaid,clientOrderId,orderId]

Basicaly we need a way that given a CoinSymbol and PricePaid we get the clientOrderId and orderId for the last sale we placed. 

Sudo Dudo! 

while(1<2)  
{
 for ( Each Coin We hard Code )
{
   GET /api/1/public/:symbol/orderbook  How much are they asking?
   GET /api/1/trading/balance   How much do we have?
   Pull the clientOrderId and orderId out of the stack for the coin and asking price.
   GET /api/1/trading/order  Check to see if the sale for clientOrderId and orderId is filled
if(We dont have a pending sale at this price and we can afford to buy)
{
    POST /api/1/trading/new_order  buy one lot of that shit
    Figure out how much we have to post it for to turn the smallest profit.
    POST /api/1/trading/new_order  Post that lot of shitcoin for sale!
}
}
    System.Threading.Thread.Sleep(5000);
}

Now even if the client running the loop crashes the buys and sells are all pending on the exchange. 

I think we want each call to the API to be its own ... subroutine? member? submember?  whatever you call them in C#.... that modular design shit. 
That will let us shuffle the body around to intoduce more complex trading logic. 




